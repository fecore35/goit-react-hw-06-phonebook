{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["ContactForm","onSave","useState","name","setName","number","setNumber","handlerChange","event","target","value","className","s","form","onSubmit","e","preventDefault","newContact","id","uuidv4","label","type","input","pattern","title","required","onChange","button","Filter","filter","container","ContactList","list","deleteContact","map","tel","replace","item","href","onClick","App","contacts","setContacts","setFilter","useEffect","localContacts","localStorage","getItem","parsContacts","JSON","parse","console","log","setItem","stringify","visibleContactsMemo","useMemo","search","toUpperCase","contact","includes","onSaveContactCallback","useCallback","newContactName","find","alert","state","deleteContactCallback","deleteID","currentTarget","dataset","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.94bce610.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactForm.module.css\";\n\nfunction ContactForm({ onSave }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handlerChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const onSaveContact = (e) => {\n    e.preventDefault();\n\n    const newContact = { id: uuidv4(), name, number };\n\n    setName(\"\");\n    setNumber(\"\");\n\n    onSave(newContact);\n  };\n\n  return (\n    <form className={s.form} onSubmit={onSaveContact}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          className={s.input}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class OldContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   handlerChange = (event) => {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//     });\n//   };\n\n//   onSaveContact = (event) => {\n//     event.preventDefault();\n\n//     const newContact = {\n//       id: uuidv4(),\n//       name: this.state.name,\n//       number: this.state.number,\n//     };\n\n//     this.setState({\n//       name: \"\",\n//       number: \"\",\n//     });\n\n//     this.props.onSave(newContact);\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={s.form} onSubmit={this.onSaveContact}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             type=\"text\"\n//             className={s.input}\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={name}\n//             onChange={this.handlerChange}\n//           />\n//         </label>\n\n//         <label className={s.label}>\n//           Number\n//           <input\n//             type=\"tel\"\n//             className={s.input}\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={number}\n//             onChange={this.handlerChange}\n//           />\n//         </label>\n\n//         <button className={s.button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nContactForm.propTypes = {\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\n\nfunction Filter({ filter, handlerChange }) {\n  return (\n    <section className={s.container}>\n      <label>\n        Find contact by name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={filter}\n          onChange={handlerChange}\n        />\n      </label>\n    </section>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  handlerChange: PropTypes.func,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport { IoCloseCircleSharp } from \"react-icons/io5\";\nimport s from \"./ContactList.module.css\";\n\nfunction ContactList({ list, deleteContact }) {\n  return (\n    <ul className={s.list}>\n      {list.map(({ id, name, number }) => {\n        const tel = `tel:` + number.replace(/^(\\+)|\\D/g, \"$1\");\n        return (\n          <li className={s.item} key={id}>\n            <p>\n              {name}: <a href={tel}>{number}</a>\n            </p>\n            <button\n              className={s.button}\n              type=\"button\"\n              data-id={id}\n              onClick={deleteContact}\n            >\n              <IoCloseCircleSharp />\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object),\n  deleteContact: PropTypes.func,\n};\n\nexport default ContactList;\n","import { useState, useEffect, useMemo, useCallback } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const localContacts = localStorage.getItem(\"phonebook\");\n    const parsContacts = JSON.parse(localContacts);\n\n    if (parsContacts) {\n      console.log(\"16\");\n      setContacts(parsContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"phonebook\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleFilter = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const visibleContactsMemo = useMemo(() => {\n    const search = filter.toUpperCase();\n    return contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(search)\n    );\n  }, [contacts, filter]);\n\n  const onSaveContactCallback = useCallback(\n    (newContact) => {\n      console.log(contacts);\n      const newContactName = newContact.name.toUpperCase();\n\n      const knownContact = contacts.find(\n        ({ name }) => name.toUpperCase() === newContactName\n      );\n\n      if (knownContact) {\n        return alert(`${newContact.name} is already in contacts.`);\n      }\n\n      setContacts((state) => [newContact, ...state]);\n    },\n    [contacts]\n  );\n\n  const deleteContactCallback = useCallback((event) => {\n    let deleteID = event.currentTarget.dataset.id;\n\n    setContacts((state) => {\n      return state.filter(({ id }) => {\n        return id !== deleteID;\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm onSave={onSaveContactCallback} />\n\n      <h2>Contacts</h2>\n      <Filter filter={filter} handlerChange={handleFilter} />\n      <ContactList\n        list={visibleContactsMemo}\n        deleteContact={deleteContactCallback}\n      />\n    </div>\n  );\n}\n\n// class OldApp extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     const localContacts = localStorage.getItem(\"phonebook\");\n//     const parsContacts = JSON.parse(localContacts);\n//     if (parsContacts) {\n//       this.setState({\n//         contacts: parsContacts,\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"phonebook\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   handlerChange = (event) => {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//     });\n//   };\n\n//   onSaveContact = (newContact) => {\n//     const { contacts } = this.state;\n//     const newContactName = newContact.name.toUpperCase();\n\n//     const knownContact = contacts.find(\n//       ({ name }) => name.toUpperCase() === newContactName\n//     );\n\n//     if (knownContact) {\n//       return alert(`${newContact.name} is already in contacts.`);\n//     }\n\n//     this.setState((prevState) => ({\n//       contacts: [newContact, ...prevState.contacts],\n//     }));\n//   };\n\n//   visibleContacts = () => {\n//     const search = this.state.filter.toUpperCase();\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toUpperCase().includes(search)\n//     );\n//   };\n\n//   deleteContact = (event) => {\n//     let deleteID = event.currentTarget.dataset.id;\n\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(({ id }) => {\n//         return id !== deleteID;\n//       }),\n//     }));\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n//     const contactsList = this.visibleContacts();\n\n//     return (\n//       <div className=\"container\">\n//         <h1>Phonebook</h1>\n//         <ContactForm onSave={this.onSaveContact} />\n\n//         <h2>Contacts</h2>\n//         <Filter filter={filter} handlerChange={this.handlerChange} />\n//         <ContactList list={contactsList} deleteContact={this.deleteContact} />\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"button\":\"ContactList_button__1RuFy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};"],"sourceRoot":""}