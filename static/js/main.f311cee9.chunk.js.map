{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/contacts-types.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-action.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","initialItems","contactsReducer","combineReducers","items","state","action","newContacts","localContacts","localStorage","getItem","JSON","parse","type","types","payload","item","setItem","stringify","filter","id","text","rootReducer","contacts","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","connect","dispatch","onSave","contact","useState","name","setName","number","setNumber","handlerChange","event","target","value","className","s","form","onSubmit","e","preventDefault","newContactName","toUpperCase","find","alert","newContact","uuidv4","label","input","pattern","title","required","onChange","button","container","getVisibleContacts","search","includes","onDelete","deleteContact","list","map","tel","replace","href","onClick","currentTarget","dataset","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f311cee9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};","// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  CREATE: \"contacts/Create\",\n  DELETE: \"contacts/Delete\",\n  FILTER: \"contacts/Filter\",\n};\n","import { combineReducers } from \"redux\";\nimport types from \"./contacts-types\";\n\nconst initialItems = [];\n\nconst itemsReducer = (state = initialItems, action) => {\n  let newContacts = [];\n  const localContacts = localStorage.getItem(\"phonebook\");\n\n  if (localContacts) {\n    state = JSON.parse(localContacts);\n  }\n\n  switch (action.type) {\n    case types.CREATE:\n      newContacts = [action.payload.item, ...state];\n\n      // ? LocalStorage - add new Contacts\n      localStorage.setItem(\"phonebook\", JSON.stringify(newContacts));\n\n      return newContacts;\n\n    case types.DELETE:\n      newContacts = state.filter((item) => item.id !== action.payload.id);\n\n      // ? LocalStorage - add new Contacts\n      localStorage.setItem(\"phonebook\", JSON.stringify(newContacts));\n\n      return newContacts;\n\n    default:\n      return state;\n  }\n};\n\nconst filterReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case types.FILTER:\n      return action.payload.text;\n\n    default:\n      return state;\n  }\n};\n\nexport const contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { createStore, combineReducers } from \"redux\";\nimport { contactsReducer } from \"./contacts/contacts-reducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport { createContact } from \"redux/contacts/contacts-action\";\n\nfunction ContactForm({ contacts, onSave }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handlerChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const onSaveContact = (e) => {\n    e.preventDefault();\n\n    const newContactName = e.target.name.value.toUpperCase();\n    const knownContactToName = contacts.find(\n      ({ name }) => name.toUpperCase() === newContactName\n    );\n\n    if (knownContactToName) {\n      return alert(`${newContactName} is already in contacts.`);\n    }\n\n    const newContact = { id: uuidv4(), name, number };\n\n    setName(\"\");\n    setNumber(\"\");\n\n    // ? GlobalState - add new Contact\n    onSave(newContact);\n  };\n\n  return (\n    <form className={s.form} onSubmit={onSaveContact}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          className={s.input}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSave: (contact) => dispatch(createContact(contact)),\n});\n\nContactForm.propTypes = {\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import types from \"./contacts-types\";\n\nexport const createContact = (item) => ({\n  type: types.CREATE,\n  payload: { item },\n});\n\nexport const deleteContact = (id) => ({\n  type: types.DELETE,\n  payload: { id },\n});\n\nexport const changeFilter = (text) => ({\n  type: types.FILTER,\n  payload: { text },\n});\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\nimport { connect } from \"react-redux\";\nimport { changeFilter } from \"../../redux/contacts/contacts-action\";\n\nfunction Filter({ filter, handlerChange }) {\n  return (\n    <section className={s.container}>\n      <label>\n        Find contact by name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={filter}\n          onChange={handlerChange}\n        />\n      </label>\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handlerChange: (e) => dispatch(changeFilter(e.target.value)),\n});\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  handlerChange: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { IoCloseCircleSharp } from \"react-icons/io5\";\nimport s from \"./ContactList.module.css\";\nimport { deleteContact } from \"../../redux/contacts/contacts-action\";\n\nfunction ContactList({ contacts, onDelete }) {\n  return (\n    <ul className={s.list}>\n      {contacts &&\n        contacts.map(({ id, name, number }) => {\n          const tel = `tel:` + number.replace(/^(\\+)|\\D/g, \"$1\");\n          return (\n            <li key={id} className={s.item}>\n              <p>\n                {name}: <a href={tel}>{number}</a>\n              </p>\n              <button\n                className={s.button}\n                type=\"button\"\n                data-id={id}\n                onClick={(e) => {\n                  onDelete(e.currentTarget.dataset.id);\n                }}\n              >\n                <IoCloseCircleSharp />\n              </button>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n\nconst getVisibleContacts = (contacts, filter) => {\n  const search = filter.toUpperCase();\n  return contacts.filter((contact) =>\n    contact.name.toUpperCase().includes(search)\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: getVisibleContacts(state.contacts.items, state.contacts.filter),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDelete: (id) => dispatch(deleteContact(id)),\n});\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  deleteContact: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"redux/store\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"button\":\"ContactList_button__1RuFy\"};"],"sourceRoot":""}